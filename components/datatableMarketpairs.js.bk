import { useContext, useCallback, useEffect, useState } from "react";
import BigNumber from "bignumber.js";
import { Container, Row, Col } from "reactstrap";
import { empty, log } from "../utils/common";
import { StoreContext } from "../context/store";
import io from "socket.io-client";

const Li = (props) => (
  <Row>
    <Col sm={2}>{props.symbol}</Col>
    <Col sm={2}>{new BigNumber(props.close).toFormat(null, 1)}</Col>
    <Col
      className={
        props.priceChangePercent < 0 ? "col text-danger" : "col text-success"
      }
      sm={2}
    >
      <strong>{`${new BigNumber(props.percentChange).toFormat(2, 1)}%`}</strong>
    </Col>
    <Col sm={2}>
      {new BigNumber(props.high).toFormat(null, 1)} / 
      {new BigNumber(props.low).toFormat(null, 1)}</Col>
    <Col sm={2}>{new BigNumber(props.quoteVolume).toFormat(2, 1)}</Col>
  </Row>
);

const __rows = {};

const DataTable = () => {
  const [rows, setRows] = useState({});
  const [socket, setSocket] = useState();
  const [isConnected, setConnected] = useState(true);

  const store = useContext(StoreContext);
  
  const loadWS = useCallback(async () => {
    if (!socket) {
      setSocket(
        io("/binance", {
          withCredentials: false,
          transports: ["websocket"],
        })
      );

      socket?.on("connect", () => {
        setConnected(true);
      });
    } 
    
  }, [socket, setSocket, setConnected]);
  
  useEffect(() => {
    loadWS();

    if (isConnected && socket) {
      socket?.on("prevDay", (msg) => {
        const { data } = JSON.parse(msg);
        store.emit("binance.prevDay", data);
      });

      socket?.on("error", (msg) => {
        log("error", msg);
      });

      socket?.on("open", (msg) => {
        log("opened", msg);
      });

      socket?.on("close", (msg) => {
        log("closed", msg);
      });

      store.on("binance.prevDay", (data) => {
        if (data?.symbol?.endsWith("USDT")) {
          const r = { [data.symbol]: data };
          __rows = { ...__rows, ...r };
          setRows(__rows);
        }
      });
    }
  }, [loadWS, isConnected, setConnected, socket, store]);
  
  const list = Object.values(rows)
      .filter((item) => item?.symbol?.endsWith("USDT"))
      .map((item) => {
        return <Li {...item} key={item?.symbol} />;
      });

  return (
    <>
      <Container className="table">
        <Row>
          <Col sm={2}>Pair</Col>
          <Col sm={2}>Last Price</Col>
          <Col sm={2}>24h Change</Col>
          <Col sm={2}>24h High/Low</Col>
          <Col sm={2}>24h Volume</Col>
        </Row>
        {list}
      </Container>
    </>
  );
};

export default DataTable;